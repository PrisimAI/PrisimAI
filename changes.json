[
  {
    "action": "create",
    "path": "dev/styleManager.js",
    "content": "// styleManager.js\n// Utility to dynamically update CSS variables in style.css at runtime\n// Supports adding, updating, and resetting styles, persisted via localStorage\n\n/**\n * Update a CSS variable in the document root.\n * @param {string} variable - The CSS variable name (without -- prefix).\n * @param {string} value - The value to assign to the variable.\n */\nexport function setStyle(variable, value) {\n  if (!variable || typeof value === 'undefined') {\n    throw new Error('Both variable and value are required.');\n  }\n  document.documentElement.style.setProperty(`--${variable}`, value);\n  persistStyle(variable, value);\n}\n\n/**\n * Reset a CSS variable to its default by removing its inline override.\n * @param {string} variable - The CSS variable name (without -- prefix).\n */\nexport function resetStyle(variable) {\n  document.documentElement.style.removeProperty(`--${variable}`);\n  removePersistedStyle(variable);\n}\n\n/**\n * Persist style changes in localStorage so they survive page reloads.\n * @param {string} variable\n * @param {string} value\n */\nfunction persistStyle(variable, value) {\n  const styles = JSON.parse(localStorage.getItem('customStyles') || '{}');\n  styles[variable] = value;\n  localStorage.setItem('customStyles', JSON.stringify(styles));\n}\n\n/**\n * Remove a persisted style from localStorage.\n * @param {string} variable\n */\nfunction removePersistedStyle(variable) {\n  const styles = JSON.parse(localStorage.getItem('customStyles') || '{}');\n  delete styles[variable];\n  localStorage.setItem('customStyles', JSON.stringify(styles));\n}\n\n/**\n * Apply persisted styles from localStorage on page load.\n */\nexport function applyPersistedStyles() {\n  const styles = JSON.parse(localStorage.getItem('customStyles') || '{}');\n  Object.entries(styles).forEach(([variable, value]) => {\n    document.documentElement.style.setProperty(`--${variable}`, value);\n  });\n}\n\n// Auto-apply persisted styles on script load\nif (typeof window !== 'undefined') {\n  document.addEventListener('DOMContentLoaded', applyPersistedStyles);\n}\n",
    "description": "Implements a style manager to change, reset, and persist CSS variables defined in style.css."
  },
  {
    "action": "create",
    "path": "__tests__/styleManager.test.js",
    "content": "// styleManager.test.js\nimport { setStyle, resetStyle, applyPersistedStyles } from '../dev/styleManager';\n\ndescribe('Style Manager', () => {\n  beforeEach(() => {\n    document.documentElement.style.cssText = '';\n    localStorage.clear();\n  });\n\n  test('setStyle applies variable to document root', () => {\n    setStyle('primary-color', 'red');\n    expect(document.documentElement.style.getPropertyValue('--primary-color')).toBe('red');\n  });\n\n  test('setStyle persists variable to localStorage', () => {\n    setStyle('background', 'blue');\n    const styles = JSON.parse(localStorage.getItem('customStyles'));\n    expect(styles.background).toBe('blue');\n  });\n\n  test('resetStyle removes variable from document root and storage', () => {\n    setStyle('font-size', '16px');\n    resetStyle('font-size');\n    expect(document.documentElement.style.getPropertyValue('--font-size')).toBe('');\n    const styles = JSON.parse(localStorage.getItem('customStyles'));\n    expect(styles['font-size']).toBeUndefined();\n  });\n\n  test('applyPersistedStyles reapplies saved styles on load', () => {\n    localStorage.setItem('customStyles', JSON.stringify({ 'primary-color': 'green' }));\n    applyPersistedStyles();\n    expect(document.documentElement.style.getPropertyValue('--primary-color')).toBe('green');\n  });\n\n  test('setStyle throws error if arguments missing', () => {\n    expect(() => setStyle('only-variable')).toThrow();\n    expect(() => setStyle('', 'someValue')).toThrow();\n  });\n});\n",
    "description": "Test suite for styleManager.js to verify dynamic CSS updates and persistence."
  },
  {
    "action": "modify",
    "path": "README.md",
    "content": "[![pages-build-deployment](https://github.com/PrisimAI/PrisimAI/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/PrisimAI/PrisimAI/actions/workflows/pages/pages-build-deployment)\n\n# PrisimAI\n\nPrisimAI is a progressive web app (PWA) that lets you chat with models powered by Pollinations.ai. Itâ€™s designed to look sleek, run fast, and stay usable even when offline. Once installed, PrisimAI behaves like a native app on desktop or mobile, complete with icons, splash screens, and offline support.\n\n## âœ¨ Features\n\n- Chat Interface â€“ Seamless, modern chat UI built with Tailwind CSS.\n- Model Selection â€“ Choose different AI models from Pollinations API.\n- PWA Support â€“ Installable on desktop and mobile, with offline caching.\n- Offline Mode â€“ Displays a custom offline page when thereâ€™s no internet.\n- Theming â€“ Colors and fonts configured for a clean, modern experience.\n- Cross-Platform Support â€“ Works on Chrome, Edge, Safari, and mobile browsers.\n- **Dynamic Style Updates** â€“ Change and persist CSS theme variables directly from the app.\n\n## ðŸš€ Getting Started\n### 1. Clone the Repository\n```bash\ngit clone https://github.com/yourusername/prisimai.git\ncd prisimai\n```\n\n### 2. Add Icons\nPlace your generated icons in the /icons folder.\n**Required:** icon-192.png and icon-512.png\n*Optional:* Apple Touch Icon (apple-touch-icon.png) and favicons\nIf you donâ€™t already have icons, you can generate them using a favicon generator (e.g. favicon.io).\n\n### 3. Run Locally\nYou need a local server to test service workers.\n#### Python 3\n```bash\npython -m http.server 8080\n```\n\n### 4. Change Styles at Runtime\nPrisimAI allows you to modify theme colors, fonts, and other CSS variables without redeploying:\n```js\nimport { setStyle, resetStyle } from './dev/styleManager.js';\nsetStyle('primary-color', '#ff6600'); // changes primary color\nresetStyle('primary-color'); // resets to default\n```\nYour style changes persist across sessions via localStorage.\n",
    "description": "Updates README to include new dynamic style change feature usage."
  }
]
