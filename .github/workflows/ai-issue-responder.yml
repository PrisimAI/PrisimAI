name: AI Issue Responder

on:
  issues:
    types: [opened]

jobs:
  auto-ai-response:
    runs-on: ubuntu-latest
    steps:
      # Step 0: Checkout repo so we can read files
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Generate AI response using Pollinations
      - name: Generate AI response
        id: ai
        run: |
          TITLE="${{ github.event.issue.title }}"
          BODY="${{ github.event.issue.body }}"

          # Include entire index.html content
          if [ -f index.html ]; then
            CODE_SNIPPET=$(cat index.html)
          else
            CODE_SNIPPET="No index.html found in the repo."
          fi

          # Build prompt including repo snippet
          PROMPT="You are a helpful GitHub assistant. Someone opened an issue titled '$TITLE' with description: '$BODY'. Here is the content of index.html from the repo:\n$CODE_SNIPPET\nSuggest possible causes and fixes in a friendly tone."

          # URL-encode the prompt for Pollinations
          ENCODED_PROMPT=$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))" "$PROMPT")

          # Call Pollinations AI
          RESPONSE=$(curl -s "https://text.pollinations.ai/$ENCODED_PROMPT?model=openai")

          # Save AI response for next step
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 2: Comment on the issue with AI response
      - name: Comment on issue
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ðŸ¤– **AI Assistant Response:**
            ${{ steps.ai.outputs.response }}

            _Generated automatically by Pollinations AI ðŸŒ¸_
