name: Pollinate - AI Feature Implementation

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  pollinate:
    runs-on: ubuntu-latest
    if: startsWith(github.event.comment.body, '!Pollinate')
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Parse feature request
        id: parse
        run: |
          COMMENT="${{ github.event.comment.body }}"
          FEATURE_DESC=$(echo "$COMMENT" | sed 's/^!Pollinate//' | xargs)
          echo "feature_description=$FEATURE_DESC" >> $GITHUB_OUTPUT
          BRANCH_NAME="pollinate/$(echo "$FEATURE_DESC" | head -c 30 | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed 's/[^a-z0-9-]//g')-$(date +%s)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create feature branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ steps.parse.outputs.branch_name }}

      - name: Call AI to implement feature
        id: ai_implement
        run: |
          # Get repository structure for context
          echo "Repository structure:" > repo_context.txt
          find . -type f -not -path '*/\.*' -not -path '*/node_modules/*' | head -50 >> repo_context.txt
          
          PROMPT="You are implementing a feature for a GitHub repository.

          Repository context:
          $(cat repo_context.txt)

          Feature request: ${{ steps.parse.outputs.feature_description }}

          Implement this feature by creating or modifying files. Return ONLY a valid JSON array (no markdown, no explanation):
          [
            {
              \"action\": \"create\",
              \"path\": \"path/to/file.js\",
              \"content\": \"// file content here\"
            }
          ]

          Rules:
          - Use \"create\" for new files, \"modify\" for existing files, \"delete\" to remove files
          - Include complete file content for create/modify actions
          - Return valid JSON only, no other text"
          
          # Call Pollinations AI API
          RESPONSE=$(curl -s https://enter.pollinations.ai/api/generate/openai \
            -H "content-type: application/json" \
            -H "authorization: Bearer HnmNucebqbTDorAfFAkbBGUOYzQVHTcEdHdKKGQQIosjgMativUHGRrUxlYpmKGC" \
            -d "{
              \"messages\": [
                {
                  \"role\": \"user\",
                  \"content\": $(echo "$PROMPT" | jq -Rs .)
                }
              ],
              \"model\": \"openai\"
            }")
          
          echo "Full API Response:"
          echo "$RESPONSE"
          
          # Extract and clean the response
          CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // .content // .')
          echo "Extracted content:"
          echo "$CONTENT"
          
          # Try to extract JSON array from markdown code blocks or raw text
          echo "$CONTENT" | sed -n '/^\[/,/^\]/p' > changes.json
          
          # If that didn't work, try to find JSON in code blocks
          if [ ! -s changes.json ]; then
            echo "$CONTENT" | sed -n '/```json/,/```/p' | sed '1d;$d' > changes.json
          fi
          
          # If still no valid JSON, try without code blocks
          if [ ! -s changes.json ]; then
            echo "$CONTENT" | grep -o '\[.*\]' > changes.json
          fi
          
          echo "Final changes.json:"
          cat changes.json

      - name: Apply changes
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const changes = JSON.parse(fs.readFileSync('changes.json', 'utf8'));
          
          for (const change of changes) {
            const filePath = change.path;
            const dir = path.dirname(filePath);
            
            if (change.action === 'create' || change.action === 'modify') {
              if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
              }
              fs.writeFileSync(filePath, change.content);
              console.log(`${change.action}: ${filePath}`);
            } else if (change.action === 'delete') {
              if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
                console.log(`deleted: ${filePath}`);
              }
            }
          }
          EOF

      - name: Commit changes
        run: |
          git add .
          git commit -m "ðŸŒ± Pollinate: ${{ steps.parse.outputs.feature_description }}" || echo "No changes to commit"
          git push origin ${{ steps.parse.outputs.branch_name }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "ðŸŒ± Pollinate: ${{ steps.parse.outputs.feature_description }}" \
            --body "This PR was automatically generated by the Pollinate action.
          
          **Feature Request:** ${{ steps.parse.outputs.feature_description }}
          **Requested by:** @${{ github.event.comment.user.login }}
          **Original Issue:** #${{ github.event.issue.number }}
          
          Please review the changes carefully before merging." \
            --base main \
            --head ${{ steps.parse.outputs.branch_name }})
          
          echo "pr_url=$PR_URL" >> $GITHUB_ENV

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸŒ± **Pollinate activated!**\n\nI've implemented your feature request and created a pull request.\n\nCheck it out: ${process.env.pr_url}`
            })
